{"version":3,"sources":["../src/server.js"],"names":["process","env","JWT_SECRET","err","Error","console","error","app","mongoose","connect","config","uri","useMongoClient","catch","Promise","global","use","bodyParser","json","urlencoded","extended","routers","req","res","next","log","message","status","port","PORT","http","createServer","listen"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAG,CAACA,QAAQC,GAAR,CAAYC,UAAhB,EAA4B;AACxB,QAAMC,MAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAZ;AACAC,YAAQC,KAAR,CAAcH,GAAd;AACH;;AAED,IAAMI,MAAM,wBAAZ;;AAEAC,mBAASC,OAAT,CAAiBC,iBAAOF,QAAP,CAAgBG,GAAjC,EAAsC,EAAEC,gBAAgB,IAAlB,EAAtC,EACCC,KADD,CACO;AAAA,WAAKR,QAAQC,KAAR,CAAcH,GAAd,CAAL;AAAA,CADP;;AAGAK,mBAASM,OAAT,GAAmBC,OAAOD,OAA1B;;AAEA;AACAP,IAAIS,GAAJ,CAAQ,qBAAR;AACAT,IAAIS,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAT,IAAIS,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAX,IAAIS,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAACC,UAAU,KAAX,EAAtB,CAAR;AACAb,IAAIS,GAAJ,CAAQ,GAAR,EAAaK,gBAAb;;AAEAd,IAAIS,GAAJ,CAAQ,UAACb,GAAD,EAAMmB,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC7BnB,YAAQoB,GAAR,CAAY,QAAZ,EAAsBtB,IAAIuB,OAA1B;AACAH,QAAII,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqBf,IAAIuB,OAAzB;AACH,CAHD;;AAKA;AACA,IAAME,OAAO5B,QAAQC,GAAR,CAAY4B,IAAZ,IAAoB,IAAjC;AACAC,eAAKC,YAAL,CAAkBxB,GAAlB,EAAuByB,MAAvB,CAA8BJ,IAA9B,EAAoC,YAAI;AACpCvB,YAAQoB,GAAR,uCAAgDG,IAAhD;AACH,CAFD","file":"server.js","sourcesContent":["\nimport express from 'express';\nimport http from 'http';\nimport bodyParser from 'body-parser';\nimport morgan from 'morgan';\nimport mongoose from 'mongoose';\nimport cors from 'cors';\nimport routers from './routes';\nimport config from './config';\n\nif(!process.env.JWT_SECRET) {\n    const err = new Error('No JWT_SECRET in env variable');\n    console.error(err);\n}\n\nconst app = express();\n\nmongoose.connect(config.mongoose.uri, { useMongoClient: true })\n.catch(err=>console.error(err));\n\nmongoose.Promise = global.Promise;\n\n// App Setup\napp.use(cors());\napp.use(morgan('dev'));\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({extended: false}));\napp.use('/', routers);\n\napp.use((err, req, res, next) => {\n    console.log('Error:', err.message);\n    res.status(422).json(err.message);\n});\n\n// Server Setup\nconst port = process.env.PORT || 8000\nhttp.createServer(app).listen(port, ()=>{\n    console.log(`\\x1b[32m`, `Server listening on: ${port}`, `\\x1b[0m`)\n});\n"]}