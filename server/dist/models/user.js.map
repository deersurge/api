{"version":3,"sources":["../../src/models/user.js"],"names":["userSchema","mongoose","Schema","name","first","String","last","email","type","unique","lowercase","emailVerified","Boolean","default","password","phone","number","verified","pre","next","user","bcrypt","genSalt","err","salt","hash","methods","comparedPassword","candidatePassword","cb","compare","good","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA;AACA,IAAMA,aAAa,IAAIC,mBAASC,MAAb,CAAoB;AACnCC,UAAM;AACFC,eAAOC,MADL;AAEFC,cAAMD;AAFJ,KAD6B;AAKnCE,WAAO;AACHC,cAAMH,MADH;AAEHI,gBAAQ,IAFL;AAGHC,mBAAW;AAHR,KAL4B;AAUnCC,mBAAe;AACXH,cAAMI,OADK;AAEXC,iBAAS;AAFE,KAVoB;AAcnCC,cAAUT,MAdyB;AAenCU,WAAO;AACHC,gBAAQ;AACJR,kBAAMH;AADF,SADL;AAIHY,kBAAU;AACNT,kBAAMI,OADA;AAENC,qBAAS;AAFH;AAJP;AAf4B,CAApB,CAAnB;;AA0BAb,WAAWkB,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAc;AACjC;AACA,QAAMC,OAAO,IAAb;;AAEAC,2BAAOC,OAAP,CAAe,EAAf,EAAmB,UAASC,GAAT,EAAcC,IAAd,EAAmB;AAClC,YAAID,GAAJ,EAAS;AAAE,mBAAOJ,KAAKI,GAAL,CAAP;AAAkB;;AAE7BF,+BAAOI,IAAP,CAAYL,KAAKN,QAAjB,EAA2BU,IAA3B,EAAiC,IAAjC,EAAuC,UAASD,GAAT,EAAcE,IAAd,EAAmB;AACtD,gBAAIF,GAAJ,EAAS;AAAE,uBAAOJ,KAAKI,GAAL,CAAP;AAAmB;;AAE9BH,iBAAKN,QAAL,GAAgBW,IAAhB;AACAN;AACH,SALD;AAMH,KATD;AAUH,CAdD;;AAgBA;AACAnB,WAAW0B,OAAX,CAAmBC,gBAAnB,GAAsC,UAASC,iBAAT,EAA4BC,EAA5B,EAAgC;AAClER,2BAAOS,OAAP,CAAeF,iBAAf,EAAkC,KAAKd,QAAvC,EAAiD,UAASS,GAAT,EAAcQ,IAAd,EAAmB;AAChE,YAAIR,GAAJ,EAAU;AAAE,mBAAOM,GAAGN,GAAH,CAAP;AAAe;AAC3BM,WAAG,IAAH,EAASE,IAAT;AACH,KAHD;AAIH,CALD;;AAOA;kBACe9B,mBAAS+B,KAAT,CAAe,MAAf,EAAuBhC,UAAvB,C","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt-nodejs';\n\n// Define the model\nconst userSchema = new mongoose.Schema({\n    name: {\n        first: String,\n        last: String,\n    },\n    email: {\n        type: String,\n        unique: true,\n        lowercase: true\n    },\n    emailVerified: {\n        type: Boolean,\n        default: false\n    },\n    password: String,\n    phone: {\n        number: {\n            type: String\n        },\n        verified: {\n            type: Boolean,\n            default: false\n        }\n    }\n})\n\nuserSchema.pre('save', function(next){\n    // get access to user model, then we can use user.email, user.password\n    const user = this;\n\n    bcrypt.genSalt(10, function(err, salt){\n        if (err) { return next(err) }\n\n        bcrypt.hash(user.password, salt, null, function(err, hash){\n            if (err) { return next(err); }\n\n            user.password = hash;\n            next()\n        })\n    })\n})\n\n// Make use of methods for comparedPassword\nuserSchema.methods.comparedPassword = function(candidatePassword, cb) {\n    bcrypt.compare(candidatePassword, this.password, function(err, good){\n        if (err ) { return cb(err)};\n        cb(null, good);\n    })\n}\n\n// Export the model\nexport default mongoose.model('User', userSchema);"]}